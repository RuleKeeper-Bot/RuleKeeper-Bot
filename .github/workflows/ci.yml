name: Build, Release, and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rulekeeper-bot:latest

  binaries:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pyinstaller python-dotenv

      - name: Set up cross-compilation (Linux ARM)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo '[aarch64]' >> ~/.pyinstaller/.spec
          echo 'target_arch = "aarch64"' >> ~/.pyinstaller/.spec

      - name: Build binary
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            pyinstaller --onefile --name rulekeeper-bot-linux-arm64 main.py
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            pyinstaller --onefile --name rulekeeper-bot-linux-x86_64 main.py
          elif [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.arch }}" == "arm64" ]]; then
            pyinstaller --onefile --name rulekeeper-bot-macos-arm64 main.py
          else
            pyinstaller --onefile --name rulekeeper-bot-macos-x86_64 main.py
          fi

      - name: Build AppImage and .deb
        if: matrix.os == 'ubuntu-latest'
        run: |
          ARCH="${{ matrix.arch }}"
          BIN_NAME=rulekeeper-bot-linux-${ARCH}

          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential libffi-dev wget squashfs-tools desktop-file-utils imagemagick
          sudo gem install --no-document fpm

          wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage --appimage-extract
          sudo mv squashfs-root/usr/bin/appimagetool /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          sudo mkdir -p /usr/local/lib/appimagekit
          sudo ln -s "$(which mksquashfs)" /usr/local/lib/appimagekit/mksquashfs || true

          mkdir -p AppDir/usr/bin
          cp dist/$BIN_NAME AppDir/usr/bin/

          convert web/static/images/icon.png -resize 256x256 AppDir/rulekeeper-bot.png

          cat <<EOF > AppDir/rulekeeper-bot.desktop
          [Desktop Entry]
          Name=RuleKeeper Bot
          Exec=rulekeeper-bot
          Icon=rulekeeper-bot
          Type=Application
          Categories=Utility;
          EOF

          chmod +x AppDir/rulekeeper-bot.desktop

          (cd AppDir && /usr/local/bin/appimagetool . ../dist/${BIN_NAME}.AppImage)
          fpm -s dir -t deb -n $BIN_NAME -v 1.0.0 -p dist/${BIN_NAME}.deb dist/$BIN_NAME=/usr/bin/rulekeeper-bot

      - name: Build .dmg
        if: matrix.os == 'macos-latest'
        run: |
          ARCH="${{ matrix.arch }}"
          brew install create-dmg
          mkdir -p dist/dmg-root
          cp dist/rulekeeper-bot-macos-${ARCH} dist/dmg-root/
          rm -f dist/rulekeeper-bot-macos-${ARCH}.dmg
          create-dmg dist/rulekeeper-bot-macos-${ARCH}.dmg dist/dmg-root
          rm -f dist/rulekeeper-bot-macos-${ARCH}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rulekeeper-bot-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  release:
    needs: binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Delete old continuous release (if exists)
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: continuous
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create new continuous release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          name: Continuous Release
          body: "Latest build of rulekeeper-bot for all platforms."
          files: |
            artifacts/rulekeeper-bot-ubuntu-latest/*
            artifacts/rulekeeper-bot-windows-latest/*
            artifacts/rulekeeper-bot-macos-latest/*
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
