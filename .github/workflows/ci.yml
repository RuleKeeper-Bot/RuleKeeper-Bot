name: Build, Release, and Publish

on:
  push:
    branches: 
      - main
      - fix/Binaries
  workflow_dispatch:

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/rulekeeper-bot:latest

  binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: arm64
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: arm64
          - os: windows-latest
            arch: x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pyinstaller python-dotenv

      - name: Uninstall pathlib backport if present
        run: |
          pip uninstall -y pathlib || true

      - name: Build binary
        shell: bash
        run: |
          OUTPUT_NAME="rulekeeper-bot-${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'macos-latest' && 'macos' || 'linux') }}-${{ matrix.arch }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pyinstaller --onefile --name $OUTPUT_NAME main.py --add-data "cogs;cogs" --hidden-import yt_dlp
          else
            pyinstaller --onefile --name $OUTPUT_NAME main.py --add-data "cogs:cogs" --hidden-import yt_dlp
          fi

      # Linux: Build AppImage and deb
      - name: Build AppImage and deb
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential libffi-dev wget squashfs-tools desktop-file-utils imagemagick
          sudo gem install --no-document fpm

          wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage --appimage-extract
          sudo mv squashfs-root/usr/bin/appimagetool /usr/local/bin/appimagetool
          sudo chmod +x /usr/local/bin/appimagetool
          sudo mkdir -p /usr/local/lib/appimagekit
          sudo ln -s "$(which mksquashfs)" /usr/local/lib/appimagekit/mksquashfs || true

          ARCH=${{ matrix.arch }}
          NAME=rulekeeper-bot-linux-${ARCH}
          mkdir -p AppDir/usr/bin
          cp dist/$NAME AppDir/usr/bin/
          convert web/static/images/icon.png -resize 256x256 AppDir/rulekeeper-bot.png

          cat <<EOF > AppDir/rulekeeper-bot.desktop
          [Desktop Entry]
          Name=RuleKeeper Bot
          Exec=rulekeeper-bot
          Icon=rulekeeper-bot
          Type=Application
          Categories=Utility;
          EOF

          chmod +x AppDir/rulekeeper-bot.desktop

          (cd AppDir && /usr/local/bin/appimagetool . ../dist/${NAME}.AppImage)
          fpm -s dir -t deb -n $NAME -v 1.0.0 -p dist/${NAME}.deb dist/$NAME=/usr/bin/rulekeeper-bot

      # macOS: Build .dmg
      - name: Build .dmg
        if: matrix.os == 'macos-latest'
        run: |
          brew install create-dmg
          ARCH=${{ matrix.arch }}
          NAME=rulekeeper-bot-macos-${ARCH}
          mkdir -p dist/dmg-root
          cp dist/$NAME dist/dmg-root/
          rm -f dist/${NAME}.dmg
          create-dmg dist/${NAME}.dmg dist/dmg-root
          rm -f dist/$NAME

      # Windows binary already named correctly, just move if needed
      - name: Rename Windows binary
        if: matrix.os == 'windows-latest'
        run: |
          mv dist/rulekeeper-bot-windows-x86_64.exe dist/rulekeeper-bot-windows-x86_64.exe

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: rulekeeper-bot-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/rulekeeper-bot-linux-*.AppImage
            dist/rulekeeper-bot-linux-*.deb
            dist/rulekeeper-bot-linux-*
            dist/rulekeeper-bot-windows-*.exe
            dist/rulekeeper-bot-macos-*.dmg

  release:
    needs: binaries
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Delete old continuous release (if exists)
        uses: dev-drprasad/delete-tag-and-release@v1.1
        with:
          tag_name: continuous
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Create new continuous release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: continuous
          name: Continuous Release
          body: "Latest build of rulekeeper-bot for all platforms."
          files: |
            artifacts/rulekeeper-bot-ubuntu-latest-x86_64/*
            artifacts/rulekeeper-bot-ubuntu-latest-arm64/*
            artifacts/rulekeeper-bot-macos-latest-x86_64/*
            artifacts/rulekeeper-bot-macos-latest-arm64/*
            artifacts/rulekeeper-bot-windows-latest-x86_64/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
